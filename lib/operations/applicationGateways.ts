/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/applicationGatewaysMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ApplicationGateways. */
export class ApplicationGateways {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ApplicationGateways.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }


  /**
   * Deletes the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }

  /**
   * Gets the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGateway>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        options
      },
      getOperationSpec);
  }


  /**
   * Creates or updates the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGateway} parameters Parameters supplied to the create or update application
   * gateway operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ApplicationGateway, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }


  /**
   * Updates the specified application gateway tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {TagsObject} parameters Parameters supplied to update application gateway tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateTagsWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, applicationGatewayName, parameters, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ApplicationGateway, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Lists all application gateways in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec);
  }

  /**
   * Gets all the application gateways in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAllWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayListResult>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec);
  }


  /**
   * Starts the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  startWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginStartWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }


  /**
   * Stops the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stopWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginStopWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }


  /**
   * Gets the backend health of the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGatewaysBackendHealthOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  backendHealthWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: Models.ApplicationGatewaysBackendHealthOptionalParams): Promise<msRest.HttpOperationResponse> {
    return this.beginBackendHealthWithHttpOperationResponse(resourceGroupName, applicationGatewayName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ApplicationGatewayBackendHealth, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Lists all available web application firewall rule sets.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableWafRuleSetsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayAvailableWafRuleSetsResult>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAvailableWafRuleSetsOperationSpec);
  }

  /**
   * Lists available Ssl options for configuring Ssl policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableSslOptionsWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayAvailableSslOptions>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAvailableSslOptionsOperationSpec);
  }

  /**
   * Lists all SSL predefined policies for configuring Ssl policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableSslPredefinedPoliciesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayAvailableSslPredefinedPolicies>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAvailableSslPredefinedPoliciesOperationSpec);
  }

  /**
   * Gets Ssl predefined policy with the specified policy name.
   *
   * @param {string} predefinedPolicyName Name of Ssl predefined policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSslPredefinedPolicyWithHttpOperationResponse(predefinedPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewaySslPredefinedPolicy>> {
    return this.client.sendOperationRequest(
      {
        predefinedPolicyName,
        options
      },
      getSslPredefinedPolicyOperationSpec);
  }

  /**
   * Deletes the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        options
      },
      beginDeleteMethodOperationSpec);
  }

  /**
   * Creates or updates the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGateway} parameters Parameters supplied to the create or update application
   * gateway operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGateway>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec);
  }

  /**
   * Updates the specified application gateway tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {TagsObject} parameters Parameters supplied to update application gateway tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGateway>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        parameters,
        options
      },
      beginUpdateTagsOperationSpec);
  }

  /**
   * Starts the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginStartWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        options
      },
      beginStartOperationSpec);
  }

  /**
   * Stops the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginStopWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        options
      },
      beginStopOperationSpec);
  }

  /**
   * Gets the backend health of the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGatewaysBeginBackendHealthOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginBackendHealthWithHttpOperationResponse(resourceGroupName: string, applicationGatewayName: string, options?: Models.ApplicationGatewaysBeginBackendHealthOptionalParams): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayBackendHealth>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGatewayName,
        options
      },
      beginBackendHealthOperationSpec);
  }

  /**
   * Lists all application gateways in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec);
  }

  /**
   * Gets all the application gateways in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAllNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec);
  }

  /**
   * Lists all SSL predefined policies for configuring Ssl policy.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ApplicationGatewayAvailableSslPredefinedPolicies>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAvailableSslPredefinedPoliciesNextOperationSpec);
  }

  /**
   * Deletes the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  deleteMethod(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Gets the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGateway} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName: string, applicationGatewayName: string): Promise<Models.ApplicationGateway>;
  get(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGateway>;
  get(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  get(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  get(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGateway>): any {
    return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Creates or updates the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGateway} parameters Parameters supplied to the create or update application
   * gateway operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGateway} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway): Promise<Models.ApplicationGateway>;
  createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGateway>;
  createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  createOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGateway>): any {
    return msRest.responseToBody(this.createOrUpdateWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, parameters, options, callback);
  }

  /**
   * Updates the specified application gateway tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {TagsObject} parameters Parameters supplied to update application gateway tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGateway} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject): Promise<Models.ApplicationGateway>;
  updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGateway>;
  updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  updateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGateway>): any {
    return msRest.responseToBody(this.updateTagsWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, parameters, options, callback);
  }

  /**
   * Lists all application gateways in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName: string): Promise<Models.ApplicationGatewayListResult>;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayListResult>;
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): any {
    return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), resourceGroupName, options, callback);
  }

  /**
   * Gets all the application gateways in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAll(): Promise<Models.ApplicationGatewayListResult>;
  listAll(options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayListResult>;
  listAll(callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): any {
    return msRest.responseToBody(this.listAllWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Starts the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  start(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  start(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  start(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  start(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  start(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.startWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Stops the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  stop(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  stop(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  stop(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  stop(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  stop(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.stopWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Gets the backend health of the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGatewaysBackendHealthOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayBackendHealth} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayBackendHealth} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  backendHealth(resourceGroupName: string, applicationGatewayName: string): Promise<Models.ApplicationGatewayBackendHealth>;
  backendHealth(resourceGroupName: string, applicationGatewayName: string, options: Models.ApplicationGatewaysBackendHealthOptionalParams): Promise<Models.ApplicationGatewayBackendHealth>;
  backendHealth(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): void;
  backendHealth(resourceGroupName: string, applicationGatewayName: string, options: Models.ApplicationGatewaysBackendHealthOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): void;
  backendHealth(resourceGroupName: string, applicationGatewayName: string, options?: Models.ApplicationGatewaysBackendHealthOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): any {
    return msRest.responseToBody(this.backendHealthWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Lists all available web application firewall rule sets.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayAvailableWafRuleSetsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayAvailableWafRuleSetsResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableWafRuleSets(): Promise<Models.ApplicationGatewayAvailableWafRuleSetsResult>;
  listAvailableWafRuleSets(options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayAvailableWafRuleSetsResult>;
  listAvailableWafRuleSets(callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableWafRuleSetsResult>): void;
  listAvailableWafRuleSets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableWafRuleSetsResult>): void;
  listAvailableWafRuleSets(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayAvailableWafRuleSetsResult>): any {
    return msRest.responseToBody(this.listAvailableWafRuleSetsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Lists available Ssl options for configuring Ssl policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayAvailableSslOptions} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayAvailableSslOptions} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableSslOptions(): Promise<Models.ApplicationGatewayAvailableSslOptions>;
  listAvailableSslOptions(options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayAvailableSslOptions>;
  listAvailableSslOptions(callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslOptions>): void;
  listAvailableSslOptions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslOptions>): void;
  listAvailableSslOptions(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslOptions>): any {
    return msRest.responseToBody(this.listAvailableSslOptionsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Lists all SSL predefined policies for configuring Ssl policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayAvailableSslPredefinedPolicies} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayAvailableSslPredefinedPolicies} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableSslPredefinedPolicies(): Promise<Models.ApplicationGatewayAvailableSslPredefinedPolicies>;
  listAvailableSslPredefinedPolicies(options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayAvailableSslPredefinedPolicies>;
  listAvailableSslPredefinedPolicies(callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
  listAvailableSslPredefinedPolicies(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
  listAvailableSslPredefinedPolicies(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): any {
    return msRest.responseToBody(this.listAvailableSslPredefinedPoliciesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets Ssl predefined policy with the specified policy name.
   *
   * @param {string} predefinedPolicyName Name of Ssl predefined policy.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewaySslPredefinedPolicy} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewaySslPredefinedPolicy} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSslPredefinedPolicy(predefinedPolicyName: string): Promise<Models.ApplicationGatewaySslPredefinedPolicy>;
  getSslPredefinedPolicy(predefinedPolicyName: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewaySslPredefinedPolicy>;
  getSslPredefinedPolicy(predefinedPolicyName: string, callback: msRest.ServiceCallback<Models.ApplicationGatewaySslPredefinedPolicy>): void;
  getSslPredefinedPolicy(predefinedPolicyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewaySslPredefinedPolicy>): void;
  getSslPredefinedPolicy(predefinedPolicyName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewaySslPredefinedPolicy>): any {
    return msRest.responseToBody(this.getSslPredefinedPolicyWithHttpOperationResponse.bind(this), predefinedPolicyName, options, callback);
  }

  /**
   * Deletes the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.beginDeleteMethodWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Creates or updates the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGateway} parameters Parameters supplied to the create or update application
   * gateway operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGateway} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway): Promise<Models.ApplicationGateway>;
  beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGateway>;
  beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  beginCreateOrUpdate(resourceGroupName: string, applicationGatewayName: string, parameters: Models.ApplicationGateway, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGateway>): any {
    return msRest.responseToBody(this.beginCreateOrUpdateWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, parameters, options, callback);
  }

  /**
   * Updates the specified application gateway tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {TagsObject} parameters Parameters supplied to update application gateway tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGateway} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGateway} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject): Promise<Models.ApplicationGateway>;
  beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGateway>;
  beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGateway>): void;
  beginUpdateTags(resourceGroupName: string, applicationGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGateway>): any {
    return msRest.responseToBody(this.beginUpdateTagsWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, parameters, options, callback);
  }

  /**
   * Starts the specified application gateway.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginStart(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  beginStart(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  beginStart(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  beginStart(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginStart(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.beginStartWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Stops the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginStop(resourceGroupName: string, applicationGatewayName: string): Promise<void>;
  beginStop(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase): Promise<void>;
  beginStop(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<void>): void;
  beginStop(resourceGroupName: string, applicationGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginStop(resourceGroupName: string, applicationGatewayName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.beginStopWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Gets the backend health of the specified application gateway in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} applicationGatewayName The name of the application gateway.
   *
   * @param {ApplicationGatewaysBeginBackendHealthOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayBackendHealth} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayBackendHealth} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginBackendHealth(resourceGroupName: string, applicationGatewayName: string): Promise<Models.ApplicationGatewayBackendHealth>;
  beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options: Models.ApplicationGatewaysBeginBackendHealthOptionalParams): Promise<Models.ApplicationGatewayBackendHealth>;
  beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): void;
  beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options: Models.ApplicationGatewaysBeginBackendHealthOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): void;
  beginBackendHealth(resourceGroupName: string, applicationGatewayName: string, options?: Models.ApplicationGatewaysBeginBackendHealthOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationGatewayBackendHealth>): any {
    return msRest.responseToBody(this.beginBackendHealthWithHttpOperationResponse.bind(this), resourceGroupName, applicationGatewayName, options, callback);
  }

  /**
   * Lists all application gateways in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.ApplicationGatewayListResult>;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): any {
    return msRest.responseToBody(this.listNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Gets all the application gateways in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAllNext(nextPageLink: string): Promise<Models.ApplicationGatewayListResult>;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayListResult>;
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): void;
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayListResult>): any {
    return msRest.responseToBody(this.listAllNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Lists all SSL predefined policies for configuring Ssl policy.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ApplicationGatewayAvailableSslPredefinedPolicies} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationGatewayAvailableSslPredefinedPolicies} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAvailableSslPredefinedPoliciesNext(nextPageLink: string): Promise<Models.ApplicationGatewayAvailableSslPredefinedPolicies>;
  listAvailableSslPredefinedPoliciesNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationGatewayAvailableSslPredefinedPolicies>;
  listAvailableSslPredefinedPoliciesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
  listAvailableSslPredefinedPoliciesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): void;
  listAvailableSslPredefinedPoliciesNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationGatewayAvailableSslPredefinedPolicies>): any {
    return msRest.responseToBody(this.listAvailableSslPredefinedPoliciesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

}

// Operation Specifications
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAvailableWafRuleSetsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayAvailableWafRuleSetsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAvailableSslOptionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayAvailableSslOptions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAvailableSslPredefinedPoliciesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayAvailableSslPredefinedPolicies
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getSslPredefinedPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.predefinedPolicyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewaySslPredefinedPolicy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ApplicationGateway,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGateway
    },
    201: {
      bodyMapper: Mappers.ApplicationGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginUpdateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const beginBackendHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.applicationGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayBackendHealth
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listAvailableSslPredefinedPoliciesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGatewayAvailableSslPredefinedPolicies
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
