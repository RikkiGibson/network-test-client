/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/connectionMonitorsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ConnectionMonitors. */
export class ConnectionMonitors {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ConnectionMonitors.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }


  /**
   * Create or update a connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {ConnectionMonitor} parameters Parameters that define the operation to create a
   * connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.ConnectionMonitor, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginCreateOrUpdate(resourceGroupName, networkWatcherName, connectionMonitorName, parameters, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ConnectionMonitorResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Gets a connection monitor by name.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ConnectionMonitorResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      getOperationSpec);
  }


  /**
   * Deletes the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginDeleteMethod(resourceGroupName, networkWatcherName, connectionMonitorName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }


  /**
   * Stops the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  stop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginStop(resourceGroupName, networkWatcherName, connectionMonitorName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }


  /**
   * Starts the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  start(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginStart(resourceGroupName, networkWatcherName, connectionMonitorName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }


  /**
   * Query a snapshot of the most recent connection states.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name given to the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  query(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginQuery(resourceGroupName, networkWatcherName, connectionMonitorName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.ConnectionMonitorQueryResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Lists all connection monitors for the specified Network Watcher.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  list(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ConnectionMonitorListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        options
      },
      listOperationSpec);
  }

  /**
   * Create or update a connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {ConnectionMonitor} parameters Parameters that define the operation to create a
   * connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCreateOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.ConnectionMonitor, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ConnectionMonitorResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec);
  }

  /**
   * Deletes the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginDeleteMethodOperationSpec);
  }

  /**
   * Stops the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginStop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginStopOperationSpec);
  }

  /**
   * Starts the specified connection monitor.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name of the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginStart(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginStartOperationSpec);
  }

  /**
   * Query a snapshot of the most recent connection states.
   *
   * @param {string} resourceGroupName The name of the resource group containing Network Watcher.
   *
   * @param {string} networkWatcherName The name of the Network Watcher resource.
   *
   * @param {string} connectionMonitorName The name given to the connection monitor.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginQuery(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ConnectionMonitorQueryResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginQueryOperationSpec);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ConnectionMonitor,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    201: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/query",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorQueryResult
    },
    202: {
      bodyMapper: Mappers.ConnectionMonitorQueryResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
