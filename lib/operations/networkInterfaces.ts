/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/networkInterfacesMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NetworkInterfaces. */
export class NetworkInterfaces {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a NetworkInterfaces.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }


  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {

        // Deserialize Response
        return operationRes;
      });
  }

  /**
   * Gets information about the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetOptionalParams): Promise<msRest.HttpOperationResponse<Models.NetworkInterface>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        options
      },
      getOperationSpec);
  }


  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or update network
   * interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.NetworkInterface, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }


  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.NetworkInterface, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAllWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec);
  }


  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.EffectiveRouteListResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }


  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {
    return this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options)
      .then(initialResult => this.client.getLongRunningOperationResult(initialResult, options))
      .then(operationRes => {
        let httpRequest = operationRes.request;

        // Deserialize Response
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        if (parsedResponse != undefined) {
          try {
            const serializer = new msRest.Serializer(Mappers);
            operationRes.parsedBody = serializer.deserialize(Mappers.EffectiveNetworkSecurityGroupListResult, parsedResponse, "operationRes.parsedBody")
          } catch (error) {
            const deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
            deserializationError.request = msRest.stripRequest(httpRequest);
            deserializationError.response = msRest.stripResponse(operationRes);
            throw deserializationError;
          }
        }
        return operationRes;
      });
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a virtual machine scale
   * set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineScaleSetName,
        virtualmachineIndex,
        options
      },
      listVirtualMachineScaleSetVMNetworkInterfacesOperationSpec);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineScaleSetName,
        options
      },
      listVirtualMachineScaleSetNetworkInterfacesOperationSpec);
  }

  /**
   * Get the specified network interface in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams): Promise<msRest.HttpOperationResponse<Models.NetworkInterface>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineScaleSetName,
        virtualmachineIndex,
        networkInterfaceName,
        options
      },
      getVirtualMachineScaleSetNetworkInterfaceOperationSpec);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceIPConfigurationListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineScaleSetName,
        virtualmachineIndex,
        networkInterfaceName,
        options
      },
      listVirtualMachineScaleSetIpConfigurationsOperationSpec);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {string} ipConfigurationName The name of the ip configuration.
   *
   * @param {NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceIPConfiguration>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineScaleSetName,
        virtualmachineIndex,
        networkInterfaceName,
        ipConfigurationName,
        options
      },
      getVirtualMachineScaleSetIpConfigurationOperationSpec);
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        options
      },
      beginDeleteMethodOperationSpec);
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or update network
   * interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterface>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec);
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterface>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        parameters,
        options
      },
      beginUpdateTagsOperationSpec);
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.EffectiveRouteListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        options
      },
      beginGetEffectiveRouteTableOperationSpec);
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.EffectiveNetworkSecurityGroupListResult>> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkInterfaceName,
        options
      },
      beginListEffectiveNetworkSecurityGroupsOperationSpec);
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listAllNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec);
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a virtual machine scale
   * set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVirtualMachineScaleSetVMNetworkInterfacesNextOperationSpec);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVirtualMachineScaleSetNetworkInterfacesNextOperationSpec);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.NetworkInterfaceIPConfigurationListResult>> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVirtualMachineScaleSetIpConfigurationsNextOperationSpec);
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName: string, networkInterfaceName: string): Promise<void>;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteMethodWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Gets information about the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName: string, networkInterfaceName: string): Promise<Models.NetworkInterface>;
  get(resourceGroupName: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetOptionalParams): Promise<Models.NetworkInterface>;
  get(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  get(resourceGroupName: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetOptionalParams, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  get(resourceGroupName: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetOptionalParams, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or update network
   * interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface): Promise<Models.NetworkInterface>;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterface>;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.createOrUpdateWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, parameters, options, callback);
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject): Promise<Models.NetworkInterface>;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterface>;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.updateTagsWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, parameters, options, callback);
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAll(): Promise<Models.NetworkInterfaceListResult>;
  listAll(options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listAll(callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listAllWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName: string): Promise<Models.NetworkInterfaceListResult>;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listWithHttpOperationResponse.bind(this), resourceGroupName, options, callback);
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveRouteListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveRouteListResult>;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<Models.EffectiveRouteListResult>;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.EffectiveRouteListResult>): void;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EffectiveRouteListResult>): void;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.EffectiveRouteListResult>): any {
    return msRest.responseToBody(this.getEffectiveRouteTableWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveNetworkSecurityGroupListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): any {
    return msRest.responseToBody(this.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a virtual machine scale
   * set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse.bind(this), resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options, callback);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse.bind(this), resourceGroupName, virtualMachineScaleSetName, options, callback);
  }

  /**
   * Get the specified network interface in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string): Promise<Models.NetworkInterface>;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams): Promise<Models.NetworkInterface>;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse.bind(this), resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options, callback);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceIPConfigurationListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams, callback?: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse.bind(this), resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options, callback);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {string} ipConfigurationName The name of the ip configuration.
   *
   * @param {NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceIPConfiguration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceIPConfiguration} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string): Promise<Models.NetworkInterfaceIPConfiguration>;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams): Promise<Models.NetworkInterfaceIPConfiguration>;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfiguration>): void;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfiguration>): void;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams, callback?: msRest.ServiceCallback<Models.NetworkInterfaceIPConfiguration>): any {
    return msRest.responseToBody(this.getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse.bind(this), resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options, callback);
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.beginDeleteMethodWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or update network
   * interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface): Promise<Models.NetworkInterface>;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterface>;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.beginCreateOrUpdateWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, parameters, options, callback);
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject): Promise<Models.NetworkInterface>;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterface>;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterface>): void;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterface>): any {
    return msRest.responseToBody(this.beginUpdateTagsWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, parameters, options, callback);
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveRouteListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveRouteListResult>;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<Models.EffectiveRouteListResult>;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.EffectiveRouteListResult>): void;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EffectiveRouteListResult>): void;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.EffectiveRouteListResult>): any {
    return msRest.responseToBody(this.beginGetEffectiveRouteTableWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveNetworkSecurityGroupListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): any {
    return msRest.responseToBody(this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse.bind(this), resourceGroupName, networkInterfaceName, options, callback);
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAllNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listAllNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a virtual machine scale
   * set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceIPConfigurationListResult} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): any {
    return msRest.responseToBody(this.listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse.bind(this), nextPageLink, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterface
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetVMNetworkInterfacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualMachineScaleSetName,
    Parameters.virtualmachineIndex,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetNetworkInterfacesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/networkInterfaces",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualMachineScaleSetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVirtualMachineScaleSetNetworkInterfaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualMachineScaleSetName,
    Parameters.virtualmachineIndex,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterface
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetIpConfigurationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualMachineScaleSetName,
    Parameters.virtualmachineIndex,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceIPConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVirtualMachineScaleSetIpConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualMachineScaleSetName,
    Parameters.virtualmachineIndex,
    Parameters.networkInterfaceName,
    Parameters.ipConfigurationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceIPConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkInterface,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterface
    },
    201: {
      bodyMapper: Mappers.NetworkInterface
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterface
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetEffectiveRouteTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveRouteTable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveRouteListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListEffectiveNetworkSecurityGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveNetworkSecurityGroups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkInterfaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EffectiveNetworkSecurityGroupListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetVMNetworkInterfacesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetNetworkInterfacesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVirtualMachineScaleSetIpConfigurationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkInterfaceIPConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
