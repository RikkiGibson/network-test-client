/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { Serializer, RequestOptionsBase, HttpOperationResponse, OperationArguments, createOperationArguments, WebResource, RestError, stripRequest, stripResponse, ServiceCallback, promiseToCallback } from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/networkInterfacesMappers";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NetworkInterfaces. */
export class NetworkInterfaces {
  private readonly client: NetworkManagementClientContext;
  private readonly serializer = new Serializer(Mappers);
  /**
   * Create a NetworkInterfaces.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }


  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: HttpOperationResponse;
    try {
      initialResult = await this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);

      // Deserialize Response
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Gets information about the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetOptionalParams): Promise<HttpOperationResponse<Models.NetworkInterface>> {
    let client = this.client;
    let expand = (options && options.expand !== undefined) ? options.expand : undefined;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          expand,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "expand",
              mapper: {
                serializedName: "$expand",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterface;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }


  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or
   * update network interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async createOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: RequestOptionsBase): Promise<HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: HttpOperationResponse;
    try {
      initialResult = await this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      try {
        if (parsedResponse !== null && parsedResponse !== undefined) {
          const resultMapper = Mappers.NetworkInterface;
          operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
        }
      } catch (error) {
        let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
        deserializationError.request = stripRequest(httpRequest);
        deserializationError.response = stripResponse(operationRes);
        return Promise.reject(deserializationError);
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network
   * interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async updateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: RequestOptionsBase): Promise<HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: HttpOperationResponse;
    try {
      initialResult = await this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      try {
        if (parsedResponse !== null && parsedResponse !== undefined) {
          const resultMapper = Mappers.NetworkInterface;
          operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
        }
      } catch (error) {
        let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
        deserializationError.request = stripRequest(httpRequest);
        deserializationError.response = stripResponse(operationRes);
        return Promise.reject(deserializationError);
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listAllWithHttpOperationResponse(options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces",
          urlParameters: [
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(resourceGroupName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }


  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: HttpOperationResponse;
    try {
      initialResult = await this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      try {
        if (parsedResponse !== null && parsedResponse !== undefined) {
          const resultMapper = Mappers.EffectiveRouteListResult;
          operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
        }
      } catch (error) {
        let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
        deserializationError.request = stripRequest(httpRequest);
        deserializationError.response = stripResponse(operationRes);
        return Promise.reject(deserializationError);
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }


  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse> {
    let client = this.client;
    // Send request
    let initialResult: HttpOperationResponse;
    try {
      initialResult = await this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options);
    } catch (err) {
      return Promise.reject(err);
    }
    let operationRes: HttpOperationResponse;
    try {
      operationRes = await client.getLongRunningOperationResult(initialResult, options);
      let httpRequest = operationRes.request;

      // Deserialize Response
      let parsedResponse = operationRes.parsedBody as { [key: string]: any };
      try {
        if (parsedResponse !== null && parsedResponse !== undefined) {
          const resultMapper = Mappers.EffectiveNetworkSecurityGroupListResult;
          operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
        }
      } catch (error) {
        let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
        deserializationError.request = stripRequest(httpRequest);
        deserializationError.response = stripResponse(operationRes);
        return Promise.reject(deserializationError);
      }
  } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a
   * virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;
    let apiVersion = '2017-03-30';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          virtualMachineScaleSetName,
          virtualmachineIndex,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualMachineScaleSetName",
              mapper: {
                required: true,
                serializedName: "virtualMachineScaleSetName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualmachineIndex",
              mapper: {
                required: true,
                serializedName: "virtualmachineIndex",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2017-03-30',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;
    let apiVersion = '2017-03-30';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          virtualMachineScaleSetName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/networkInterfaces",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualMachineScaleSetName",
              mapper: {
                required: true,
                serializedName: "virtualMachineScaleSetName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2017-03-30',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Get the specified network interface in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param
   * {NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams}
   * [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams): Promise<HttpOperationResponse<Models.NetworkInterface>> {
    let client = this.client;
    let expand = (options && options.expand !== undefined) ? options.expand : undefined;
    let apiVersion = '2017-03-30';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          virtualMachineScaleSetName,
          virtualmachineIndex,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          expand,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualMachineScaleSetName",
              mapper: {
                required: true,
                serializedName: "virtualMachineScaleSetName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualmachineIndex",
              mapper: {
                required: true,
                serializedName: "virtualmachineIndex",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2017-03-30',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "expand",
              mapper: {
                serializedName: "$expand",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterface;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param
   * {NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams}
   * [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams): Promise<HttpOperationResponse<Models.NetworkInterfaceIPConfigurationListResult>> {
    let client = this.client;
    let expand = (options && options.expand !== undefined) ? options.expand : undefined;
    let apiVersion = '2017-03-30';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          virtualMachineScaleSetName,
          virtualmachineIndex,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          expand,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualMachineScaleSetName",
              mapper: {
                required: true,
                serializedName: "virtualMachineScaleSetName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualmachineIndex",
              mapper: {
                required: true,
                serializedName: "virtualmachineIndex",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2017-03-30',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "expand",
              mapper: {
                serializedName: "$expand",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceIPConfigurationListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {string} ipConfigurationName The name of the ip configuration.
   *
   * @param
   * {NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams}
   * [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams): Promise<HttpOperationResponse<Models.NetworkInterfaceIPConfiguration>> {
    let client = this.client;
    let expand = (options && options.expand !== undefined) ? options.expand : undefined;
    let apiVersion = '2017-03-30';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          virtualMachineScaleSetName,
          virtualmachineIndex,
          networkInterfaceName,
          ipConfigurationName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          expand,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualMachineScaleSetName",
              mapper: {
                required: true,
                serializedName: "virtualMachineScaleSetName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "virtualmachineIndex",
              mapper: {
                required: true,
                serializedName: "virtualmachineIndex",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "ipConfigurationName",
              mapper: {
                required: true,
                serializedName: "ipConfigurationName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2017-03-30',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "expand",
              mapper: {
                serializedName: "$expand",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceIPConfiguration;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<void>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "DELETE",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 204 && statusCode !== 202 && statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or
   * update network interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterface>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          parameters,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "PUT",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          requestBody: {
            parameterPath: "parameters",
            mapper: {
              ...Mappers.NetworkInterface,
              required: true
            }
          },
          contentType: "application/json; charset=utf-8",
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 201 && statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 201) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterface;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterface;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError1 = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError1.request = stripRequest(httpRequest);
          deserializationError1.response = stripResponse(operationRes);
          return Promise.reject(deserializationError1);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network
   * interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async beginUpdateTagsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterface>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          parameters,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "PATCH",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          requestBody: {
            parameterPath: "parameters",
            mapper: {
              ...Mappers.TagsObject,
              required: true
            }
          },
          contentType: "application/json; charset=utf-8",
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterface;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.EffectiveRouteListResult>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveRouteTable",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200 && statusCode !== 202) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.EffectiveRouteListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.EffectiveNetworkSecurityGroupListResult>> {
    let client = this.client;
    let apiVersion = '2018-04-01';

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          resourceGroupName,
          networkInterfaceName,
          apiVersion,
          "this.client.subscriptionId": this.client.subscriptionId,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveNetworkSecurityGroups",
          urlParameters: [
            {
              parameterPath: "resourceGroupName",
              mapper: {
                required: true,
                serializedName: "resourceGroupName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "networkInterfaceName",
              mapper: {
                required: true,
                serializedName: "networkInterfaceName",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterPath: "this.client.subscriptionId",
              mapper: {
                required: true,
                serializedName: "subscriptionId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterPath: "apiVersion",
              mapper: {
                required: true,
                isConstant: true,
                serializedName: "api-version",
                defaultValue: '2018-04-01',
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200 && statusCode !== 202) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.EffectiveNetworkSecurityGroupListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listAllNextWithHttpOperationResponse(nextPageLink: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://management.azure.com",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterPath: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://management.azure.com",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterPath: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a
   * virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://management.azure.com",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterPath: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceListResult>> {
    let client = this.client;

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://management.azure.com",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterPath: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse(nextPageLink: string, options?: RequestOptionsBase): Promise<HttpOperationResponse<Models.NetworkInterfaceIPConfigurationListResult>> {
    let client = this.client;

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: HttpOperationResponse;
    try {
      const operationArguments: OperationArguments = createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://management.azure.com",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterPath: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterPath: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            }
          ],
          serializer: this.serializer
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = stripRequest(httpRequest);
        error.response = stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.CloudError;
            error.body = this.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.NetworkInterfaceIPConfigurationListResult;
            operationRes.parsedBody = this.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = stripRequest(httpRequest);
          deserializationError.response = stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName: string, networkInterfaceName: string): Promise<void>;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<void>;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<void>;
    if (!callback) {
      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets information about the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterfacesGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName: string, networkInterfaceName: string): Promise<Models.NetworkInterface>;
  get(resourceGroupName: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetOptionalParams): Promise<Models.NetworkInterface>;
  get(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<Models.NetworkInterface>): void;
  get(resourceGroupName: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetOptionalParams, callback: ServiceCallback<Models.NetworkInterface>): void;
  get(resourceGroupName: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetOptionalParams, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or
   * update network interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface): Promise<Models.NetworkInterface>;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: RequestOptionsBase): Promise<Models.NetworkInterface>;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, callback: ServiceCallback<Models.NetworkInterface>): void;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterface>): void;
  createOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network
   * interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject): Promise<Models.NetworkInterface>;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: RequestOptionsBase): Promise<Models.NetworkInterface>;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, callback: ServiceCallback<Models.NetworkInterface>): void;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterface>): void;
  updateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.updateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.updateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAll(): Promise<Models.NetworkInterfaceListResult>;
  listAll(options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listAll(callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAll(options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAll(options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listAllWithHttpOperationResponse(options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listAllWithHttpOperationResponse(options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName: string): Promise<Models.NetworkInterfaceListResult>;
  list(resourceGroupName: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  list(resourceGroupName: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  list(resourceGroupName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  list(resourceGroupName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(resourceGroupName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveRouteListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveRouteListResult>;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<Models.EffectiveRouteListResult>;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<Models.EffectiveRouteListResult>): void;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.EffectiveRouteListResult>): void;
  getEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.EffectiveRouteListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.EffectiveRouteListResult>;
    if (!callback) {
      return this.getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.EffectiveRouteListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.getEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.EffectiveRouteListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      Models.EffectiveNetworkSecurityGroupListResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  listEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>;
    if (!callback) {
      return this.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.EffectiveNetworkSecurityGroupListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.EffectiveNetworkSecurityGroupListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a
   * virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetVMNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName: string, virtualMachineScaleSetName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetNetworkInterfacesWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Get the specified network interface in a virtual machine scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param
   * {NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams}
   * [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string): Promise<Models.NetworkInterface>;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams): Promise<Models.NetworkInterface>;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: ServiceCallback<Models.NetworkInterface>): void;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams, callback: ServiceCallback<Models.NetworkInterface>): void;
  getVirtualMachineScaleSetNetworkInterface(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.getVirtualMachineScaleSetNetworkInterfaceWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param
   * {NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams}
   * [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      Models.NetworkInterfaceIPConfigurationListResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, callback: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams, callback: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurations(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, options?: Models.NetworkInterfacesListVirtualMachineScaleSetIpConfigurationsOptionalParams, callback?: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceIPConfigurationListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetIpConfigurationsWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceIPConfigurationListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} virtualMachineScaleSetName The name of the virtual machine
   * scale set.
   *
   * @param {string} virtualmachineIndex The virtual machine index.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {string} ipConfigurationName The name of the ip configuration.
   *
   * @param
   * {NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams}
   * [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceIPConfiguration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceIPConfiguration} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string): Promise<Models.NetworkInterfaceIPConfiguration>;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams): Promise<Models.NetworkInterfaceIPConfiguration>;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, callback: ServiceCallback<Models.NetworkInterfaceIPConfiguration>): void;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams, callback: ServiceCallback<Models.NetworkInterfaceIPConfiguration>): void;
  getVirtualMachineScaleSetIpConfiguration(resourceGroupName: string, virtualMachineScaleSetName: string, virtualmachineIndex: string, networkInterfaceName: string, ipConfigurationName: string, options?: Models.NetworkInterfacesGetVirtualMachineScaleSetIpConfigurationOptionalParams, callback?: ServiceCallback<Models.NetworkInterfaceIPConfiguration>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceIPConfiguration>;
    if (!callback) {
      return this.getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceIPConfiguration);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.getVirtualMachineScaleSetIpConfigurationWithHttpOperationResponse(resourceGroupName, virtualMachineScaleSetName, virtualmachineIndex, networkInterfaceName, ipConfigurationName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceIPConfiguration;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Deletes the specified network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<void>;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<void>): void;
  beginDeleteMethod(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<void>;
    if (!callback) {
      return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Creates or updates a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {NetworkInterface} parameters Parameters supplied to the create or
   * update network interface operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface): Promise<Models.NetworkInterface>;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: RequestOptionsBase): Promise<Models.NetworkInterface>;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, callback: ServiceCallback<Models.NetworkInterface>): void;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterface>): void;
  beginCreateOrUpdate(resourceGroupName: string, networkInterfaceName: string, parameters: Models.NetworkInterface, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Updates a network interface tags.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {TagsObject} parameters Parameters supplied to update network
   * interface tags.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterface} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterface} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject): Promise<Models.NetworkInterface>;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: RequestOptionsBase): Promise<Models.NetworkInterface>;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, callback: ServiceCallback<Models.NetworkInterface>): void;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterface>): void;
  beginUpdateTags(resourceGroupName: string, networkInterfaceName: string, parameters: Models.TagsObject, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterface>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterface>;
    if (!callback) {
      return this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterface);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.beginUpdateTagsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, parameters, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterface;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all route tables applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.EffectiveRouteListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.EffectiveRouteListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveRouteListResult>;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<Models.EffectiveRouteListResult>;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<Models.EffectiveRouteListResult>): void;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.EffectiveRouteListResult>): void;
  beginGetEffectiveRouteTable(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.EffectiveRouteListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.EffectiveRouteListResult>;
    if (!callback) {
      return this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.EffectiveRouteListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.beginGetEffectiveRouteTableWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.EffectiveRouteListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network security groups applied to a network interface.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} networkInterfaceName The name of the network interface.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.EffectiveNetworkSecurityGroupListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      Models.EffectiveNetworkSecurityGroupListResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase): Promise<Models.EffectiveNetworkSecurityGroupListResult>;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, callback: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options: RequestOptionsBase, callback: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): void;
  beginListEffectiveNetworkSecurityGroups(resourceGroupName: string, networkInterfaceName: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.EffectiveNetworkSecurityGroupListResult>;
    if (!callback) {
      return this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.EffectiveNetworkSecurityGroupListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.beginListEffectiveNetworkSecurityGroupsWithHttpOperationResponse(resourceGroupName, networkInterfaceName, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.EffectiveNetworkSecurityGroupListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listAllNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listAllNext(nextPageLink: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listAllNext(nextPageLink: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAllNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listAllNext(nextPageLink: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listAllNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listAllNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listNext(nextPageLink: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listNext(nextPageLink: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listNext(nextPageLink: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets information about all network interfaces in a virtual machine in a
   * virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetVMNetworkInterfacesNext(nextPageLink: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetVMNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets all network interfaces in a virtual machine scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NetworkInterfaceListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceListResult>;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceListResult>): void;
  listVirtualMachineScaleSetNetworkInterfacesNext(nextPageLink: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetNetworkInterfacesNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Get the specified network interface ip configuration in a virtual machine
   * scale set.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NetworkInterfaceIPConfigurationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      Models.NetworkInterfaceIPConfigurationListResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options: RequestOptionsBase): Promise<Models.NetworkInterfaceIPConfigurationListResult>;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, callback: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options: RequestOptionsBase, callback: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): void;
  listVirtualMachineScaleSetIpConfigurationsNext(nextPageLink: string, options?: RequestOptionsBase, callback?: ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as ServiceCallback<Models.NetworkInterfaceIPConfigurationListResult>;
    if (!callback) {
      return this.listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.NetworkInterfaceIPConfigurationListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      promiseToCallback(this.listVirtualMachineScaleSetIpConfigurationsNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.NetworkInterfaceIPConfigurationListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

}
